//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SIF.Visualization.Excel.Properties {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SIF.Visualization.Excel.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap delete {
            get {
                object obj = ResourceManager.GetObject("delete", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap Download {
            get {
                object obj = ResourceManager.GetObject("Download", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap dynamic_violation {
            get {
                object obj = ResourceManager.GetObject("dynamic_violation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap Edit {
            get {
                object obj = ResourceManager.GetObject("Edit", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap empty_violation {
            get {
                object obj = ResourceManager.GetObject("empty_violation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not handle SIF server response! ähnelt.
        /// </summary>
        public static string Error_FaultyResponse {
            get {
                return ResourceManager.GetString("Error_FaultyResponse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Could not reach SIF server! ähnelt.
        /// </summary>
        public static string Error_NoConnectionToServer {
            get {
                return ResourceManager.GetString("Error_NoConnectionToServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap falsepositive {
            get {
                object obj = ResourceManager.GetObject("falsepositive", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap findings_new {
            get {
                object obj = ResourceManager.GetObject("findings_new", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap input_clear {
            get {
                object obj = ResourceManager.GetObject("input_clear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap inspectionpane {
            get {
                object obj = ResourceManager.GetObject("inspectionpane", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap intermediate_clear {
            get {
                object obj = ResourceManager.GetObject("intermediate_clear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap output_clear {
            get {
                object obj = ResourceManager.GetObject("output_clear", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap plus {
            get {
                object obj = ResourceManager.GetObject("plus", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap sanity {
            get {
                object obj = ResourceManager.GetObject("sanity", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap sanity_violation {
            get {
                object obj = ResourceManager.GetObject("sanity_violation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap save {
            get {
                object obj = ResourceManager.GetObject("save", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap scenarios {
            get {
                object obj = ResourceManager.GetObject("scenarios", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap solved {
            get {
                object obj = ResourceManager.GetObject("solved", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap static_violation {
            get {
                object obj = ResourceManager.GetObject("static_violation", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Archive ähnelt.
        /// </summary>
        public static string tl_Archive {
            get {
                return ResourceManager.GetString("tl_Archive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        public static string tl_Cancel {
            get {
                return ResourceManager.GetString("tl_Cancel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cell definitions ähnelt.
        /// </summary>
        public static string tl_CellDefinitions {
            get {
                return ResourceManager.GetString("tl_CellDefinitions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Background ähnelt.
        /// </summary>
        public static string tl_CellErrorInfo_Background {
            get {
                return ResourceManager.GetString("tl_CellErrorInfo_Background", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Possible Solution ähnelt.
        /// </summary>
        public static string tl_CellErrorInfo_PossibleSolution {
            get {
                return ResourceManager.GetString("tl_CellErrorInfo_PossibleSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Confirm ähnelt.
        /// </summary>
        public static string tl_CellPicker_Confirm {
            get {
                return ResourceManager.GetString("tl_CellPicker_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please ‪select the Cell area where the Rule should apply. ähnelt.
        /// </summary>
        public static string tl_CellPicker_Label {
            get {
                return ResourceManager.GetString("tl_CellPicker_Label", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please ‪select the Cell area on the spreadsheet where the Rule should be applied. ähnelt.
        /// </summary>
        public static string tl_CellPicker_Text {
            get {
                return ResourceManager.GetString("tl_CellPicker_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please dont assign more than 10000 cells to a rule. ähnelt.
        /// </summary>
        public static string tl_CellPicker_ToManyCells {
            get {
                return ResourceManager.GetString("tl_CellPicker_ToManyCells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Only allows 1 digit after comma. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_Choose1Comma {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_Choose1Comma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Only allows up to 2 digits after comma. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_Choose2Comma {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_Choose2Comma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_ChooseCharacterCount1 {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_ChooseCharacterCount1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please enter a valid Number. This Number ist the limit how many characters are allowed in a cell. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_ChooseCharacterCount2 {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_ChooseCharacterCount2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please choose the type of the new condition. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_ChooseConditionType {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_ChooseConditionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The cell has to be empty. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_ChooseEmpty {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_ChooseEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Only allows Numbers ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_ChooseOnlyNumbers {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_ChooseOnlyNumbers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please enter a valid Regex string. This string will limit the contents of the cell. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_ChooseRegex {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_ChooseRegex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Name of the Condition: ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_ConditionName {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_ConditionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Create Condition ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_Confirm {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Empty Cell ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_Empty {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid Condition type. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_Error {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please enter a valid interger number. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_NoCharCount {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_NoCharCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please select your desired Condition type. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_NoCondition {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_NoCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There is no Input requiered. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_NoInputReq {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_NoInputReq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please enter a name. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_NoName {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_NoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please enter a valid Regex string. ähnelt.
        /// </summary>
        public static string tl_ConditionPicker_NoRegex {
            get {
                return ResourceManager.GetString("tl_ConditionPicker_NoRegex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignored ähnelt.
        /// </summary>
        public static string tl_Ignored {
            get {
                return ResourceManager.GetString("tl_Ignored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Later ähnelt.
        /// </summary>
        public static string tl_Later {
            get {
                return ResourceManager.GetString("tl_Later", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The following parts were unable to load: ähnelt.
        /// </summary>
        public static string tl_Load_Failed {
            get {
                return ResourceManager.GetString("tl_Load_Failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Loading from workbook failed ähnelt.
        /// </summary>
        public static string tl_Load_Failed_Title {
            get {
                return ResourceManager.GetString("tl_Load_Failed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The inspection queue has been cleared due to memory restrictions. ähnelt.
        /// </summary>
        public static string tl_MemoryRestrictions {
            get {
                return ResourceManager.GetString("tl_MemoryRestrictions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error ähnelt.
        /// </summary>
        public static string tl_MessageBox_Error {
            get {
                return ResourceManager.GetString("tl_MessageBox_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No ähnelt.
        /// </summary>
        public static string tl_MessageBox_No {
            get {
                return ResourceManager.GetString("tl_MessageBox_No", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ok ähnelt.
        /// </summary>
        public static string tl_MessageBox_Ok {
            get {
                return ResourceManager.GetString("tl_MessageBox_Ok", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Untitled new scenario ähnelt.
        /// </summary>
        public static string tl_NewScenarioDialog_DefaultAnswer {
            get {
                return ResourceManager.GetString("tl_NewScenarioDialog_DefaultAnswer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please give your scenario a name: ähnelt.
        /// </summary>
        public static string tl_NewScenarioDialog_Question {
            get {
                return ResourceManager.GetString("tl_NewScenarioDialog_Question", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New Scenario... ähnelt.
        /// </summary>
        public static string tl_NewScenarioDialog_Title {
            get {
                return ResourceManager.GetString("tl_NewScenarioDialog_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No java runtime was found!
        ///Please ensure a Java runtime environment &gt;= 1.7 is installed and accessible through the PATH variable.
        ///The Scan button will be without function. ähnelt.
        /// </summary>
        public static string tl_No_Java_Enviroment {
            get {
                return ResourceManager.GetString("tl_No_Java_Enviroment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Rules created. Please create a new Rule with the Rule Editor. ähnelt.
        /// </summary>
        public static string tl_NoRulesSide {
            get {
                return ResourceManager.GetString("tl_NoRulesSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scaning not avaliable right now ähnelt.
        /// </summary>
        public static string tl_NoScanPossible {
            get {
                return ResourceManager.GetString("tl_NoScanPossible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No scenarios created. Please create a new scenario from the Ribbon menu. ähnelt.
        /// </summary>
        public static string tl_NoScenariosSide {
            get {
                return ResourceManager.GetString("tl_NoScenariosSide", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Number format ähnelt.
        /// </summary>
        public static string tl_Number_Format {
            get {
                return ResourceManager.GetString("tl_Number_Format", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open ähnelt.
        /// </summary>
        public static string tl_Open {
            get {
                return ResourceManager.GetString("tl_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No open findings ähnelt.
        /// </summary>
        public static string tl_OpenView_Empty {
            get {
                return ResourceManager.GetString("tl_OpenView_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die There is not enough memory (RAM) to scan the file ähnelt.
        /// </summary>
        public static string tl_OutOfMemory {
            get {
                return ResourceManager.GetString("tl_OutOfMemory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please install the Spreadsheet Inspection Framework and restart Excel. ähnelt.
        /// </summary>
        public static string tl_Path_install {
            get {
                return ResourceManager.GetString("tl_Path_install", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The Spreadsheet Inspection Framework was not found at this location:
        /// ähnelt.
        /// </summary>
        public static string tl_Path_missing {
            get {
                return ResourceManager.GetString("tl_Path_missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Processing scan ähnelt.
        /// </summary>
        public static string tl_ProcessingScan {
            get {
                return ResourceManager.GetString("tl_ProcessingScan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Input Cell ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Inputcell {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Inputcell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines a Input Cell. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_InputcellTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_InputcellTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Intermediate Cell ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Intermediatecell {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Intermediatecell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines a Intermediate Cell. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_IntermediatecellTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_IntermediatecellTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Result Cell ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Resultcell {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Resultcell", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Defines a Result Cell. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_ResultcellTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_ResultcellTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Define Scenario Cells ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaDefine_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaDefine_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Global Settings ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaMiscellaneous_GlobalSettingsButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaMiscellaneous_GlobalSettingsButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Show sanity controls ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaMiscellaneous_ShowSanity {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaMiscellaneous_ShowSanity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Miscellaneous ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaMiscellaneous_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaMiscellaneous_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rule Editor ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaRule_RuleEditor {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaRule_RuleEditor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rules ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaRule_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaRule_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens the Rule Editor for a new Rule ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaRuleEditor_Tooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaRuleEditor_Tooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Automatic scans ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_AutomaticScansCheckbox {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_AutomaticScansCheckbox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_AutomaticScansCheckboxTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_AutomaticScansCheckboxTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Policy configuration ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_PolicyConfigurationButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_PolicyConfigurationButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die  ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_PolicyConfigurationButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_PolicyConfigurationButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scan ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_ScanButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_ScanButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scans the current workbook with all scenarios. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_ScanButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_ScanButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Test ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScan_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScan_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cancel ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_CancelButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_CancelButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Discard this scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_CancelButtonTolltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_CancelButtonTolltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_NewButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_NewButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Creates a new scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_NewButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_NewButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_SaveButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_SaveButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save this scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_SaveButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_SaveButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scenario ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaScenario_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaScenario_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Inspection Pane ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_PaneButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_PaneButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens a pane with the cell definitions, scenario overview and findings. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_PaneButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_PaneButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Reset document ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_ResetButton {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_ResetButton", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Resets the document to the state before the test execution. ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_ResetButtonTooltip {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_ResetButtonTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die View ähnelt.
        /// </summary>
        public static string tl_Ribbon_AreaView_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_AreaView_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No policies, scenarios or custom rules are enabled for manual scans. Please enable a policy or create a scenario or custom rule and try again. ähnelt.
        /// </summary>
        public static string tl_Ribbon_MessageNoPolicies {
            get {
                return ResourceManager.GetString("tl_Ribbon_MessageNoPolicies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Error ähnelt.
        /// </summary>
        public static string tl_Ribbon_MessageNoPolicies_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_MessageNoPolicies_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You cannot run a scan while editing a scenario. Save or discard the scenario and try again. ähnelt.
        /// </summary>
        public static string tl_Ribbon_MessageNoScansInScnearioMode {
            get {
                return ResourceManager.GetString("tl_Ribbon_MessageNoScansInScnearioMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scanning not possible now ähnelt.
        /// </summary>
        public static string tl_Ribbon_MessageNoScansInScnearioModeTitle {
            get {
                return ResourceManager.GetString("tl_Ribbon_MessageNoScansInScnearioModeTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die INSPECTION ähnelt.
        /// </summary>
        public static string tl_Ribbon_Title {
            get {
                return ResourceManager.GetString("tl_Ribbon_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Choose Rule application area ähnelt.
        /// </summary>
        public static string tl_RuleEditor_CellPicker {
            get {
                return ResourceManager.GetString("tl_RuleEditor_CellPicker", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Condition(s): ähnelt.
        /// </summary>
        public static string tl_RuleEditor_Condition {
            get {
                return ResourceManager.GetString("tl_RuleEditor_Condition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 1 or 0 Commas ähnelt.
        /// </summary>
        public static string tl_RuleEditor_Condition_1Comma {
            get {
                return ResourceManager.GetString("tl_RuleEditor_Condition_1Comma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die 0,1 or 2 Commas ähnelt.
        /// </summary>
        public static string tl_RuleEditor_Condition_2Comma {
            get {
                return ResourceManager.GetString("tl_RuleEditor_Condition_2Comma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Character Count ähnelt.
        /// </summary>
        public static string tl_RuleEditor_Condition_CharacterCount {
            get {
                return ResourceManager.GetString("tl_RuleEditor_Condition_CharacterCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Only Numbers ähnelt.
        /// </summary>
        public static string tl_RuleEditor_Condition_OnlyNumbers {
            get {
                return ResourceManager.GetString("tl_RuleEditor_Condition_OnlyNumbers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Create new Rule ähnelt.
        /// </summary>
        public static string tl_RuleEditor_Confirm {
            get {
                return ResourceManager.GetString("tl_RuleEditor_Confirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Trigger when: ähnelt.
        /// </summary>
        public static string tl_RuleEditor_FilterCondition {
            get {
                return ResourceManager.GetString("tl_RuleEditor_FilterCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die All conditions are satisfied ähnelt.
        /// </summary>
        public static string tl_RuleEditor_FilterConditionAND {
            get {
                return ResourceManager.GetString("tl_RuleEditor_FilterConditionAND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Condition is satisfied ähnelt.
        /// </summary>
        public static string tl_RuleEditor_FilterConditionNONE {
            get {
                return ResourceManager.GetString("tl_RuleEditor_FilterConditionNONE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die (At least) one condition is satisfied ähnelt.
        /// </summary>
        public static string tl_RuleEditor_FilterConditionOR {
            get {
                return ResourceManager.GetString("tl_RuleEditor_FilterConditionOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die New Condition ähnelt.
        /// </summary>
        public static string tl_RuleEditor_NewCondition {
            get {
                return ResourceManager.GetString("tl_RuleEditor_NewCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No condition specified. Please create at least one condition for the rule ähnelt.
        /// </summary>
        public static string tl_RuleEditor_NoCondition {
            get {
                return ResourceManager.GetString("tl_RuleEditor_NoCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Description found. The rule will be created without an description. ähnelt.
        /// </summary>
        public static string tl_RuleEditor_NoDescription {
            get {
                return ResourceManager.GetString("tl_RuleEditor_NoDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No name found. Please enter a name for the rule ähnelt.
        /// </summary>
        public static string tl_RuleEditor_NoName {
            get {
                return ResourceManager.GetString("tl_RuleEditor_NoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Rule Cells. ähnelt.
        /// </summary>
        public static string tl_RuleEditor_NoRuleCells {
            get {
                return ResourceManager.GetString("tl_RuleEditor_NoRuleCells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cell Area: ähnelt.
        /// </summary>
        public static string tl_RuleEditor_RuleArea {
            get {
                return ResourceManager.GetString("tl_RuleEditor_RuleArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rule Description: ähnelt.
        /// </summary>
        public static string tl_RuleEditor_RuleDescription {
            get {
                return ResourceManager.GetString("tl_RuleEditor_RuleDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rule Editor ähnelt.
        /// </summary>
        public static string tl_RuleEditor_Title {
            get {
                return ResourceManager.GetString("tl_RuleEditor_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The area where the rule will be applied. ähnelt.
        /// </summary>
        public static string tl_RuleEditor_ToolTip_CellArea {
            get {
                return ResourceManager.GetString("tl_RuleEditor_ToolTip_CellArea", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A rule consists of one or more conditions that can be added with &quot;Add new Condition&quot;. ähnelt.
        /// </summary>
        public static string tl_RuleEditor_ToolTip_Condition {
            get {
                return ResourceManager.GetString("tl_RuleEditor_ToolTip_Condition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A description of the rule that should describe the usage. ähnelt.
        /// </summary>
        public static string tl_RuleEditor_ToolTip_Description {
            get {
                return ResourceManager.GetString("tl_RuleEditor_ToolTip_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The name this rule will be using from now. ähnelt.
        /// </summary>
        public static string tl_RuleEditor_ToolTip_Name {
            get {
                return ResourceManager.GetString("tl_RuleEditor_ToolTip_Name", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Deletes this Rule ähnelt.
        /// </summary>
        public static string tl_RulePane_DeleteRuleTooltip {
            get {
                return ResourceManager.GetString("tl_RulePane_DeleteRuleTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens the Rule Editor to edit this Rule ähnelt.
        /// </summary>
        public static string tl_RulePane_EditRuleTooltip {
            get {
                return ResourceManager.GetString("tl_RulePane_EditRuleTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rules ähnelt.
        /// </summary>
        public static string tl_Rules {
            get {
                return ResourceManager.GetString("tl_Rules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The test of the current document failed!
        /// ähnelt.
        /// </summary>
        public static string tl_Scan_failed {
            get {
                return ResourceManager.GetString("tl_Scan_failed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scan aborted ähnelt.
        /// </summary>
        public static string tl_Scan_needingsavetitle {
            get {
                return ResourceManager.GetString("tl_Scan_needingsavetitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The file needs to be saved before a scan can be done. 
        ///Scan will be aborted  ähnelt.
        /// </summary>
        public static string tl_Scan_needssave {
            get {
                return ResourceManager.GetString("tl_Scan_needssave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scan successful ähnelt.
        /// </summary>
        public static string tl_Scan_successful {
            get {
                return ResourceManager.GetString("tl_Scan_successful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scan unsuccessful ähnelt.
        /// </summary>
        public static string tl_Scan_unsuccessful {
            get {
                return ResourceManager.GetString("tl_Scan_unsuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scan failed.
        /// ähnelt.
        /// </summary>
        public static string tl_Scan_unsuccessfulMessage {
            get {
                return ResourceManager.GetString("tl_Scan_unsuccessfulMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can\&apos;t create scenario ähnelt.
        /// </summary>
        public static string tl_Scenario_CantCreate {
            get {
                return ResourceManager.GetString("tl_Scenario_CantCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A scenario needs at least one input cell value. ähnelt.
        /// </summary>
        public static string tl_Scenario_MinOneInput {
            get {
                return ResourceManager.GetString("tl_Scenario_MinOneInput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A scenario needs at least one output cell value. ähnelt.
        /// </summary>
        public static string tl_Scenario_MinOneOutput {
            get {
                return ResourceManager.GetString("tl_Scenario_MinOneOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You didn&apos;t fill all selected input-, output- and itermediatecells.
        ///Possible solutions:
        ///- fill these missing cells
        ///- abort the scenario creation.
        ///- delete unncessaryselected cells and try it again. ähnelt.
        /// </summary>
        public static string tl_Scenario_Notallcellsfilled {
            get {
                return ResourceManager.GetString("tl_Scenario_Notallcellsfilled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Cells were marked for Scenario usage. ähnelt.
        /// </summary>
        public static string tl_ScenarioCellList_Footer {
            get {
                return ResourceManager.GetString("tl_ScenarioCellList_Footer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Delete cell ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_DeleteData {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_DeleteData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Delete selected cell ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_DeleteDataTooltip {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_DeleteDataTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Discard ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_DiscardData {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_DiscardData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Are you sure you want to discard the changes? ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_DiscardDataMessageBox {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_DiscardDataMessageBox", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Discard changes ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_DiscardDataMessageBoxTitle {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_DiscardDataMessageBoxTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Discards the changes on the selected scenario ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_DiscardDataTooltip {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_DiscardDataTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_SaveData {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_SaveData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Save changes in the open scenario ähnelt.
        /// </summary>
        public static string tl_ScenarioDetailView_SaveDataTooltip {
            get {
                return ResourceManager.GetString("tl_ScenarioDetailView_SaveDataTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scenario Overview ähnelt.
        /// </summary>
        public static string tl_ScenarioOverview {
            get {
                return ResourceManager.GetString("tl_ScenarioOverview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Are you sure you want to delete the scenario named ähnelt.
        /// </summary>
        public static string tl_ScenarioPane_DeleteConfirmQuestion {
            get {
                return ResourceManager.GetString("tl_ScenarioPane_DeleteConfirmQuestion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Delete scenario ähnelt.
        /// </summary>
        public static string tl_ScenarioPane_DeleteConfirmQuestionTitle {
            get {
                return ResourceManager.GetString("tl_ScenarioPane_DeleteConfirmQuestionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Delete scenario ähnelt.
        /// </summary>
        public static string tl_ScenarioPane_DeleteScenario {
            get {
                return ResourceManager.GetString("tl_ScenarioPane_DeleteScenario", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Deletes the selected scenario ähnelt.
        /// </summary>
        public static string tl_ScenarioPane_DeleteScenarioTooltip {
            get {
                return ResourceManager.GetString("tl_ScenarioPane_DeleteScenarioTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Edit ähnelt.
        /// </summary>
        public static string tl_ScenarioPane_EditScenario {
            get {
                return ResourceManager.GetString("tl_ScenarioPane_EditScenario", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Opens a new window to edit the scenario ähnelt.
        /// </summary>
        public static string tl_ScenarioPane_EditScenarioTooltip {
            get {
                return ResourceManager.GetString("tl_ScenarioPane_EditScenarioTooltip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No scenarios created. Please create a new scenario from the Ribbon menu. ähnelt.
        /// </summary>
        public static string tl_ScenarioPane_NoScenarios {
            get {
                return ResourceManager.GetString("tl_ScenarioPane_NoScenarios", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Yes don\&apos;t show again ähnelt.
        /// </summary>
        public static string tl_Separator_Confirmed_all {
            get {
                return ResourceManager.GetString("tl_Separator_Confirmed_all", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Yes, ignore it in this field ähnelt.
        /// </summary>
        public static string tl_Separator_Confirmed_this {
            get {
                return ResourceManager.GetString("tl_Separator_Confirmed_this", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die You have used a thousands separator character, was this intended behavior? ähnelt.
        /// </summary>
        public static string tl_Separator_intended {
            get {
                return ResourceManager.GetString("tl_Separator_intended", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Archived findings ähnelt.
        /// </summary>
        public static string tl_Sidebar_Archived {
            get {
                return ResourceManager.GetString("tl_Sidebar_Archived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Marked cells ähnelt.
        /// </summary>
        public static string tl_Sidebar_Cells {
            get {
                return ResourceManager.GetString("tl_Sidebar_Cells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Ignored findings ähnelt.
        /// </summary>
        public static string tl_Sidebar_Ignored {
            get {
                return ResourceManager.GetString("tl_Sidebar_Ignored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Findings for later ähnelt.
        /// </summary>
        public static string tl_Sidebar_Later {
            get {
                return ResourceManager.GetString("tl_Sidebar_Later", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Open findings ähnelt.
        /// </summary>
        public static string tl_Sidebar_Open {
            get {
                return ResourceManager.GetString("tl_Sidebar_Open", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Rules ähnelt.
        /// </summary>
        public static string tl_Sidebar_Rules {
            get {
                return ResourceManager.GetString("tl_Sidebar_Rules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Scenarios ähnelt.
        /// </summary>
        public static string tl_Sidebar_Scenarios {
            get {
                return ResourceManager.GetString("tl_Sidebar_Scenarios", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unfortunatly SIFCore crashed.
        ///Try scanning the file again and if this doesn&apos;t help close and open the file again. ähnelt.
        /// </summary>
        public static string tl_SIFCorecrashed {
            get {
                return ResourceManager.GetString("tl_SIFCorecrashed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No solved findings ähnelt.
        /// </summary>
        public static string tl_SolvedView_Empty {
            get {
                return ResourceManager.GetString("tl_SolvedView_Empty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please start a new Scans ähnelt.
        /// </summary>
        public static string tl_StartNewScan {
            get {
                return ResourceManager.GetString("tl_StartNewScan", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please stop editing the cell and start a new scan ähnelt.
        /// </summary>
        public static string tl_stopEdit {
            get {
                return ResourceManager.GetString("tl_stopEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Please dont select more than 10000 Cells. ähnelt.
        /// </summary>
        public static string tl_ToManyCells {
            get {
                return ResourceManager.GetString("tl_ToManyCells", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The validation caused an error!
        /// ähnelt.
        /// </summary>
        public static string tl_ValidationError {
            get {
                return ResourceManager.GetString("tl_ValidationError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Background: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_Background {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_Background", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Description: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_Description {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die First occurence: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_FirstOccurence {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_FirstOccurence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Less details ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_LessDetails {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_LessDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die More details ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_MoreDetails {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_MoreDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Possible solution: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_PossibleSolution {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_PossibleSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Type: ähnelt.
        /// </summary>
        public static string tl_ViolationTemplate_Type {
            get {
                return ResourceManager.GetString("tl_ViolationTemplate_Type", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die delete ähnelt.
        /// </summary>
        public static string tl_ViolationView_Delete {
            get {
                return ResourceManager.GetString("tl_ViolationView_Delete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die violation(s) in list ähnelt.
        /// </summary>
        public static string tl_ViolationView_Footer {
            get {
                return ResourceManager.GetString("tl_ViolationView_Footer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die ignore ähnelt.
        /// </summary>
        public static string tl_ViolationView_Ignore {
            get {
                return ResourceManager.GetString("tl_ViolationView_Ignore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die later ähnelt.
        /// </summary>
        public static string tl_ViolationView_Later {
            get {
                return ResourceManager.GetString("tl_ViolationView_Later", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Violations in this tab. ähnelt.
        /// </summary>
        public static string tl_ViolationView_NoViolations {
            get {
                return ResourceManager.GetString("tl_ViolationView_NoViolations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die reset ähnelt.
        /// </summary>
        public static string tl_ViolationView_Reset {
            get {
                return ResourceManager.GetString("tl_ViolationView_Reset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap trash {
            get {
                object obj = ResourceManager.GetObject("trash", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Ressource vom Typ System.Drawing.Bitmap.
        /// </summary>
        public static System.Drawing.Bitmap violations {
            get {
                object obj = ResourceManager.GetObject("violations", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}
